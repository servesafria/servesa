export = cervezario;
declare function cervezario(config?: {}): Cervezario;
declare namespace cervezario {
    export { cervezario, CervezarioConfig };
}
declare class Cervezario {
    constructor(config?: {});
    config: {
        autogenerate: boolean;
        generator: any;
        processor: any[];
        define: {};
    };
    items: Map<any, any>;
    get(name: any): any;
    add: (...args: any[]) => {
        "__#3@#contained": {};
        "__#3@#children": {};
        readonly children: any[];
        readonly childrenByName: {};
        child(name: any): any;
        content(name: any): any;
        container: any;
        containers: any[];
        slug: string;
        slugs: any[];
        name: string;
        spec: obj;
        parents: any[];
        parent: any;
        relative: string;
    };
    addFile: (...args: any[]) => {
        "__#3@#contained": {};
        "__#3@#children": {};
        readonly children: any[];
        readonly childrenByName: {};
        child(name: any): any;
        content(name: any): any;
        container: any;
        containers: any[];
        slug: string;
        slugs: any[];
        name: string;
        spec: obj;
        parents: any[];
        parent: any;
        relative: string;
    };
    loadDirectory: (...args: any[]) => Promise<{
        "__#3@#contained": {};
        "__#3@#children": {};
        readonly children: any[];
        readonly childrenByName: {};
        child(name: any): any;
        content(name: any): any;
        container: any;
        containers: any[];
        slug: string;
        slugs: any[];
        name: string;
        spec: obj;
        parents: any[];
        parent: any;
        relative: string;
    }[]>;
    getSpec: (...args: any[]) => obj;
    collect: (...args: any[]) => {
        specs: any[];
        names: any[];
    };
    indexer: Indexer;
    collector: Collector;
    generator: any;
    generate(input: any, meta?: {}): any;
    #private;
}
type CervezarioConfig = {
    /**
     * - the default file extension for this instance.
     */
    extension: string;
    /**
     * - the basename of directory index files.
     */
    indexName: string;
    /**
     * - whether to treat files that are named the same as the directory as index files.
     */
    autoIndex: number;
    /**
     * =>any} importer - the function used to import the found files.
     */
    "": string;
    /**
     * - if true, an item will be autogenerated for each loaded spec and available with item.get(path)
     */
    autogenerate: boolean;
};
import { Indexer } from "./Indexer.js";
import { Collector } from "./Collector.js";
