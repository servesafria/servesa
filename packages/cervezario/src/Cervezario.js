
/**
 * @typedef CervezarioConfig
 * @type {object}
 * @property {string} extension - the default file extension for this instance.
 * @property {string} indexName - the basename of directory index files.
 * @property {number} autoIndex - whether to treat files that are named the same as the directory as index files.
 * @property {string=>any} importer - the function used to import the found files. 
 * @property {string=>string[]} pickExtends - the function to find the extends field on the imported file. 
 * @property {any[]=>any} generator - a custom generator function to use instead of cerveza.
 * @property {object<(arg?)=>(any[],any[]?)=>any>} - define cerveza named processors.
 * @property {any} - cerveza processor specification.
 * @property {boolean} autogenerate - if true, an item will be autogenerated for each loaded spec and available with item.get(path)
 */

import cerveza from "cerveza";
import { Collector } from "./Collector.js"
import { Indexer } from "./Indexer.js"
import { fixName } from './utils.js'


export class Cervezario {
  config = {
    autogenerate: true,
    generator: null,
    processor: [],
    define: {}
  }

  items = new Map()

  get(name) {
    return this.items.get(fixName(name))
  }

  add = (...args) => this.indexer.add(...args);
  addFile = (...args) => this.indexer.addFile(...args);
  loadDirectory = (...args) => this.indexer.loadDirectory(...args);
  getSpec = (...args) => this.indexer.getSpec(...args);
  collect = (...args) => this.collector.collect(...args);

  constructor(config = {}) {
    for (const id in this.config) if (id in config) this.config[id] = config[id];

    this.indexer = new Indexer({
      ...config,
      onEntriesAdded: this.#onEntriesAdded,
    })

    this.collector = new Collector({
      ...config,
      getSpec: this.indexer.getSpec,
      getParentName: this.indexer.getParentName
    })
    if (this.config.generator) {
      this.generator = this.config.generator
    } else {
      const { processor, define } = this.config;
      this.generator = cerveza.create({
        define,
        processor
      })
    }

  }

  #onEntriesAdded = entries => {
    if (!this.config.autogenerate) return;
    for (const entry of entries) {
      if (!entry.spec) continue;
      this.#autogenerate(entry)
    }
  }

  #autogenerate(entry) {
    console.log('autogenerate',entry.name)
    let meta = {
      spec: entry.spec,
      name: entry.name,
      slug: entry.slug,
      relative: entry.relative,
      get parent() {return entry.parent?.item },
      get parents(){ return entry.parents.map(x => x.item) },
      get children() { return entry.children.map(x => x.item) },
      child: (name) => entry.childrenByName[name].item,
    }
    let item =this.generate(entry.name, meta);
    entry.item = item;
    //item.entry = entry.name;
    this.items.set(entry.name, item)
  }

  generate(input, meta = {}) {
    let { specs, names } = this.collector.collect(input)
    meta.inherits = names;
    return this.generator([{ meta }, ...specs])
  }
}
